apply plugin: 'com.android.library'
apply plugin: 'com.github.dcendents.android-maven'
apply plugin: 'com.jfrog.bintray'

ext {
    eegeoExternalSource = false
}

// publishing information
group = 'com.wrld'
def buildNumber = project.hasProperty('build.number') ? project.ext['build.number'] : 'dev'
version = '0.0.' + buildNumber

android {
    compileSdkVersion 28

    defaultConfig {
        minSdkVersion 15
        targetSdkVersion 28
        publishNonDefault rootProject.hasProperty('useLocalSdkBuild') ? rootProject.getProperty('useLocalSdkBuild').toBoolean() : false
        archivesBaseName = 'wrld-android-sdk'

        versionCode = project.hasProperty('build.number') ? project.ext['build.number'] as Integer : 0
        versionName = version

        if (rootProject.hasProperty('eegeoExternalSource')) {
            eegeoExternalSource = rootProject['eegeoExternalSource']
        }

        externalNativeBuild {
            cmake {
                cppFlags "-std=c++11 -fexceptions -frtti -Werror -Wall -Wno-reorder"

                arguments "-DANDROID_ARM_MODE=arm",
                        "-DANDROID_STL=c++_static"

                targets "eegeo-jni"
            }
        }
        ndk {
            // filter for abi types to be packed into aar. Also defaults cmake to building these
            // abis, but can be overridden with externalNativeBuild.cmake.abiFilters
            abiFilters "armeabi-v7a", "arm64-v8a", "x86", "x86_64"
        }

        lintOptions {
            baseline file("lint-baseline.xml")
        }
    }


    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
        }

        debug {
            minifyEnabled false
            debuggable true
            jniDebuggable true
        }
    }

    externalNativeBuild {
        cmake {
            if (eegeoExternalSource.toBoolean()) {
                println 'using eeGeo development C++ SDK private source build'
                path "../../external-sdk-src/CMakeLists.txt"
            } else {
                println 'using prebuilt eeGeo C++ SDK libs'
                path "./src/main/cpp/CMakeLists.txt"
            }
        }
    }
}

dependencies {
    api fileTree(include: ['*.jar'], dir: 'libs')
    implementation 'com.android.support:appcompat-v7:28.0.0'
    implementation 'com.android.support:support-annotations:28.0.0'
    androidTestImplementation('com.android.support.test.espresso:espresso-core:2.2.2', {
        exclude group: 'com.android.support', module: 'support-annotations'
    })
    testImplementation 'junit:junit:4.12'
}

task javadoc(type: Javadoc) {
    source = project(':sdk').fileTree(include: ['**/*.java'], dir: 'src/main/java')
    classpath += project.files(android.getBootClasspath().join(File.pathSeparator))
    classpath += configurations.compile
    options.tags = ["eegeo.examples:X", "eegeo.internal:X", "eegeo.code:X", "eegeo.codeintro:X"]
}

task javadocJar(type: Jar, dependsOn: javadoc) {
    classifier = 'javadoc'
    from javadoc.destinationDir
}

task sourcesJar(type: Jar) {
    classifier = 'sources'
    from android.sourceSets.main.java.srcDirs
}

artifacts {
    archives javadocJar
    archives sourcesJar
}

install {
    repositories.mavenInstaller {
        pom.project {
            name 'WRLD Android SDK'
            description 'Android library for beautiful 3D maps'
            url 'https://github.com/wrld3d/android-api'
            inceptionYear '2017'

            packaging 'aar'
            groupId 'com.wrld'
            artifactId 'wrld-android-sdk'
            licenses {
                license {
                    name 'BSD Simplified'
                    url 'https://opensource.org/licenses/BSD-2-Clause'
                    distribution 'repo'
                }
            }
            scm {
                connection 'https://github.com/eegeo/android-api.git'
                url 'https://github.com/eegeo/android-api'

            }
            developers {
                developer {
                    name 'WRLD'
                }
            }
        }
    }
}

bintray {
    user = System.getenv('BINTRAY_USER')
    key = System.getenv('BINTRAY_API_KEY')
    configurations = ['archives']
    publish = true
    pkg {
        repo = 'maven'
        name = 'wrld-android-sdk'
        userOrg = 'wrld'
        licenses = ['BSD 2-Clause']
        vcsUrl = 'https://github.com/wrld3d/android-api.git'
    }
}
