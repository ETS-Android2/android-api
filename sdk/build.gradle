apply plugin: 'com.android.library'
apply plugin: 'maven-publish'
apply plugin: 'maven'
apply plugin: 'signing'

import com.amazonaws.auth.*

ext {
    eegeoExternalSource = false
}

// publishing information
group = 'com.wrld3d'
def buildNumber = project.hasProperty('build.number') ? project.ext['build.number'] : 'dev'
version = '0.0.' + buildNumber

android {
    compileSdkVersion 28

    defaultConfig {
        minSdkVersion 16
        targetSdkVersion 28
        publishNonDefault rootProject.hasProperty('useLocalSdkBuild') ? rootProject.getProperty('useLocalSdkBuild').toBoolean() : false
        archivesBaseName = 'wrld-android-sdk'

        versionCode = project.hasProperty('build.number') ? project.ext['build.number'] as Integer : 0
        versionName = version

        if (rootProject.hasProperty('eegeoExternalSource')) {
            eegeoExternalSource = rootProject['eegeoExternalSource']
        }

        externalNativeBuild {
            cmake {
                cppFlags "-std=c++11 -fexceptions -frtti -Werror -Wall -Wno-reorder"

                arguments "-DANDROID_ARM_MODE=arm",
                        "-DANDROID_STL=c++_static"

                targets "eegeo-jni"
            }
        }
        ndk {
            // filter for abi types to be packed into aar. Also defaults cmake to building these
            // abis, but can be overridden with externalNativeBuild.cmake.abiFilters
            abiFilters "armeabi-v7a", "arm64-v8a", "x86", "x86_64"
        }

        lintOptions {
            baseline file("lint-baseline.xml")
        }
    }


    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
        }

        debug {
            minifyEnabled false
            debuggable true
            jniDebuggable true
        }
    }

    externalNativeBuild {
        cmake {
            if (eegeoExternalSource.toBoolean()) {
                println 'using eeGeo development C++ SDK private source build'
                path "../../external-sdk-src/CMakeLists.txt"
            } else {
                println 'using prebuilt eeGeo C++ SDK libs'
                path "./src/main/cpp/CMakeLists.txt"
            }
        }
    }
}

dependencies {
    api fileTree(include: ['*.jar'], dir: 'libs')
    implementation 'androidx.appcompat:appcompat:1.0.0'
    implementation 'androidx.annotation:annotation:1.0.0'
    androidTestImplementation('androidx.test.espresso:espresso-core:3.1.0', {
        exclude group: 'com.android.support', module: 'support-annotations'
    })
    testImplementation 'junit:junit:4.12'
}

task javadoc(type: Javadoc) {
    source = project(':sdk').fileTree(include: ['**/*.java'], dir: 'src/main/java')
    classpath += project.files(android.getBootClasspath().join(File.pathSeparator))
    classpath += configurations.compile
    options.tags = ["eegeo.examples:X", "eegeo.internal:X", "eegeo.code:X", "eegeo.codeintro:X"]
}

task javadocJar(type: Jar, dependsOn: javadoc) {
    classifier = 'javadoc'
    from javadoc.destinationDir
}

task sourcesJar(type: Jar) {
    classifier = 'sources'
    from android.sourceSets.main.java.srcDirs
}

artifacts {
    archives javadocJar
    archives sourcesJar
}

signing {
    def signingKey = findProperty("signingKey")
    def signingPassword = findProperty("signingPassword")

    if (signingKey) {
        useInMemoryPgpKeys(signingKey, signingPassword)
        sign configurations.archives
    }
}

uploadArchives {
    repositories {
        mavenDeployer {
            beforeDeployment { MavenDeployment deployment -> signing.signPom(deployment) }

            repository(url: "https://oss.sonatype.org/service/local/staging/deploy/maven2/") {
                authentication(userName: System.getenv("OSSRH_USERNAME"), password: System.getenv("OSSRH_PASSWORD"))
            }

            snapshotRepository(url: "https://oss.sonatype.org/content/repositories/snapshots/") {
                authentication(userName: System.getenv("OSSRH_USERNAME"), password: System.getenv("OSSRH_PASSWORD"))
            }

            pom.project {
                name 'WRLD Android SDK'
                description 'Android library for beautiful 3D maps'
                url 'https://github.com/wrld3d/android-api'
                inceptionYear '2017'

                packaging 'aar'
                groupId 'com.wrld3d'
                artifactId 'wrld-android-sdk'
                licenses {
                    license {
                        name 'BSD Simplified'
                        url 'https://opensource.org/licenses/BSD-2-Clause'
                        distribution 'repo'
                    }
                }
                scm {
                    connection 'https://github.com/eegeo/android-api.git'
                    url 'https://github.com/eegeo/android-api'

                }
                developers {
                    developer {
                        name 'WRLD'
                    }
                }
            }
        }
    }
}

nexusStaging {
    packageGroup = "com.wrld3d"
    username = System.getenv("OSSRH_USERNAME")
    password = System.getenv("OSSRH_PASSWORD")
    stagingProfileId = System.getenv("OSSRH_STAGING_PROFILE_ID")
}

def buildAwsCredentials = {
    try {
        return new DefaultAWSCredentialsProviderChain().credentials
    } catch (Exception e) {
        logger.info('Unable to retrieve AWS credentials for s3 upload.', e)
        return new AnonymousAWSCredentials();
    }
}

AWSCredentials awsCredentials = buildAwsCredentials()
def s3storeUrl = project.hasProperty('s3.upload.store') ? project.ext['s3.upload.store'] : ""

publishing {
    publications {
        WrldAndroidSdk (MavenPublication) {
            groupId 'com.wrld'
            artifactId 'wrld-android-sdk'
            version version
            artifact "$buildDir/outputs/aar/wrld-android-sdk-release.aar"
        }
    }
    repositories {
        maven {
            url s3storeUrl
            credentials(AwsCredentials) {
                accessKey = awsCredentials.AWSAccessKeyId
                secretKey = awsCredentials.AWSSecretKey
            }
        }
    }
}
